{"name":"Stationed","tagline":"Rails application generator and scaffold templates","body":"# Stationed\r\n\r\n## Introduction\r\n\r\nStationed is an extensive Rails application generator, providing you with a\r\nstarter app full standard goodies such as testing, authentication,\r\nauthorization, decorators, tasks and styles. But as an engine it also provides\r\nyou with customized scaffold generators including proper tests. Finally, it\r\nprovides some basic view helpers that every project tends to need. All in all,\r\nstationed is pretty sweet.\r\n\r\n## Installation\r\n\r\nIn order to use Stationed to generate applications, install the gem:\r\n\r\n    % gem install stationed\r\n\r\nTo use it as an engine in your Rails application, include it in your Gemfile:\r\n\r\n    gem 'stationed'\r\n\r\nRun `bundle install` and you're all set.\r\n\r\n## Application generator\r\n\r\nThe application generator is invoked using the `stationed` command:\r\n\r\n    % stationed my_app\r\n\r\nThis will generate a default Rails application with the following additions:\r\n\r\n* **Rubocop** for automated style guide testing.\r\n* **Pry** for debugging.\r\n* **Guard** for auto-running tests.\r\n* **Rspec** with Simplecov for testing.\r\n* **FactoryGirl** for object factories.\r\n* **DatabaseCleaner** as transaction replacement.\r\n* **Capybara** for feature testing.\r\n* **CapybaraWebkit** for headless browser testing.\r\n* **Pundit** for authorization.\r\n* **Yard** for API documentation.\r\n* **Foreman** for process management.\r\n* **Bourbon, Neat and Bitters and normalize.css** for styling.\r\n* **Draper** for decorators.\r\n* **Gollum** for a built-in development wiki.\r\n* **Devise** for authentication.\r\n* **Turbolinks** removed.\r\n* **Kaminari** for pagination.\r\n* **SimpleForm** for awesome form markup.\r\n* **Haml** for pretty view templates.\r\n* **Webmock** to disallow external HTTP requests in tests.\r\n* **I18nSpec** for automated validation of locale files.\r\n* **Responders** for DRY controllers.\r\n\r\n...and some other minor configurations and goodies.\r\n\r\nAll these additions are stand-alone \"plugins\" for the base application\r\ngenerator, so it is easy to adapt them or add others. Have a look at\r\n`lib/stationed/generators/plugins` to see all plugins.\r\n\r\n## Helpers\r\n\r\n### Page title\r\n\r\nThe page title helper allows you to set a page title based on a string,\r\ntranslation key or by a resource. You can easily output it on your page and in\r\nyour layout.\r\n\r\n* When given no argument, this will return the currently set page title or\r\n  the site-wide default.\r\n* When given a string argument, that will be used in the formatted page\r\n  title (for example with a site-wide suffix).\r\n* When given an ActiveModel-compliant object, its singular and plural human\r\n  names will be interpolated into the model-based title template, along\r\n  with the record's ID.\r\n\r\nYou can provide templates for page titles using `I18n` in three broad\r\ncategories: the `model`, `formatted` and `standard` keys. These will be used\r\nwhen you set a page title via a model, string or nothing at all, respectively.\r\n\r\nYou can specify these translation keys on a global default level, per controller\r\nor per controller action. The more specific key will take precedence.\r\n\r\n### CRUD link helpers\r\n\r\nA collection of helper methods to generate links to CRUD operations with labels\r\nand URLs generated by resources.\r\n\r\nFor example:\r\n\r\n    link_to_new(Post) # => <a href=\"/posts/new\">New Post</a>\r\n    link_to_edit(@product) # => <a href=\"/products/1/edit\">Edit Product 1</a>\r\n\r\nYou can use I18n to fully customize the labels on these links. There are helper\r\nmethods for `new`, `edit`, `show`, `destroy` and `index`, in the variants\r\n`link_to`, `button_to` and `button_link_to` (for links with a `button` class\r\nname).\r\n\r\n### Templates\r\n\r\nStationed includes customized scaffold templates for Haml, Rspec and\r\ncontrollers. These work out of the box, but you can use a generator to install\r\nthe templates into your application for easy customization:\r\n\r\n    rails generate stationed:templates\r\n\r\n## Other\r\n\r\n### Note on Patches/Pull Requests\r\n\r\n1. Fork the project.\r\n2. Make your feature addition or bug fix.\r\n3. Add tests for it. This is important so I don't break it in a future version\r\n   unintentionally.\r\n4. Commit, do not mess with rakefile, version, or history. (if you want to have\r\n   your own version, that is fine but bump version in a commit by itself I can\r\n   ignore when I pull)\r\n5. Send me a pull request. Bonus points for topic branches.\r\n\r\n### Issues\r\n\r\nPlease report any issues, defects or suggestions in the [Github issue\r\ntracker](https://github.com/avdgaag/stationed/issues).\r\n\r\n### What has changed?\r\n\r\nSee the [HISTORY](https://github.com/avdgaag/stationed/blob/master/HISTORY.md) file for a detailed changelog.\r\n\r\n### Credits\r\n\r\nCreated by: Arjan van der Gaag  \r\nURL: [http://arjanvandergaag.nl](http://arjanvandergaag.nl)  \r\nProject homepage:\r\n[http://avdgaag.github.com/rpub](http://avdgaag.github.com/stationed)  \r\nDate: april 2014  \r\nLicense: [MIT-license](https://github.com/avdgaag/stationed/LICENSE) (same as Ruby)\r\n","google":"UA-20357800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}